diff --git a/assets/services/cart-service.js b/assets/services/cart-service.js
index 4da7020ce..118f09492 100644
--- a/assets/services/cart-service.js
+++ b/assets/services/cart-service.js
@@ -144,8 +144,14 @@ export function getCartTotalItems(cart) {
     return cart.items.reduce((acc, item) => (acc + item.quantity), 0);
 }
 
+/**
+ * Gets the full info on the shopping cart
+ *
+ * @param {CartCollection} cart
+ * @returns {Array}
+ */
 export async function getFullShoppingCart(cart) {
-    const productIds = this.cart.items.map((item) => item.product);
+    const productIds = cart.items.map((item) => item.product);
     let colorsResponse = null;
     let productsResponse = null;
 
@@ -155,19 +161,20 @@ export async function getFullShoppingCart(cart) {
             getProductsById(productIds),
         ]);
     } catch (e) {
-        this.loading = false;
-        return;
+        return [];
     }
 
+    const mappedColors = {};
+
     // Map all colors to our object dictionary by @id
     colorsResponse.data['hydra:member'].forEach((color) => {
-        this.colors[color['@id']] = color;
+        mappedColors[color['@id']] = color;
     });
 
     // Assign our returned products to our products array,
     // applying the proper colorId, hexColor and qty values
-    this.items = productsResponse.data['hydra:member'].map((product) => {
-        const productInCart = this.cart.items.find(
+    return productsResponse.data['hydra:member'].map((product) => {
+        const productInCart = cart.items.find(
             (item) => (item.product === product['@id']),
         );
 
@@ -175,7 +182,7 @@ export async function getFullShoppingCart(cart) {
             ...product,
             colorId: productInCart.color,
             hexColor: productInCart.color
-                ? this.colors[productInCart.color].hexColor
+                ? mappedColors[productInCart.color].hexColor
                 : 'fff',
             qty: productInCart.quantity,
         };
