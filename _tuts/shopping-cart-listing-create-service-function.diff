diff --git a/assets/pages/shopping-cart.vue b/assets/pages/shopping-cart.vue
index d94b52fab..ee1b2dbb7 100644
--- a/assets/pages/shopping-cart.vue
+++ b/assets/pages/shopping-cart.vue
@@ -48,32 +48,6 @@ export default {
     },
     watch: {
         async cart() {
-            const productIds = this.cart.items.map((item) => item.product);
-
-            const [colorsResponse, productsResponse] = await Promise.all([
-                fetchColors(),
-                fetchProductsById(productIds),
-            ]);
-
-            // Map all colors to our object dictionary by @id
-            const mappedColors = {};
-            colorsResponse.data['hydra:member'].forEach((color) => {
-                mappedColors[color['@id']] = color;
-            });
-
-            const products = productsResponse.data['hydra:member'];
-
-            const completeItems = this.cart.items.map((cartItem) => (
-                {
-                    product: products.find((product) => product['@id'] === cartItem.product),
-                    color: cartItem.color ? mappedColors[cartItem.color] : null,
-                    quantity: cartItem.quantity,
-                }
-            ));
-
-            this.completeCart = {
-                items: completeItems,
-            };
         },
     },
 };
diff --git a/assets/services/cart-service.js b/assets/services/cart-service.js
index 4efcd765a..31a16cc14 100644
--- a/assets/services/cart-service.js
+++ b/assets/services/cart-service.js
@@ -1,4 +1,6 @@
 import axios from 'axios';
+import { fetchColors } from '@/services/colors-service';
+import { fetchProductsById } from '@/services/products-service';
 
 /**
  * @typedef {Object} CartCollection
@@ -146,3 +148,32 @@ export function clearCart() {
 export function getCartTotalItems(cart) {
     return cart.items.reduce((acc, item) => (acc + item.quantity), 0);
 }
+
+export async function fetchFullCart(cart) {
+    const productIds = this.cart.items.map((item) => item.product);
+
+    const [colorsResponse, productsResponse] = await Promise.all([
+        fetchColors(),
+        fetchProductsById(productIds),
+    ]);
+
+    // Map all colors to our object dictionary by @id
+    const mappedColors = {};
+    colorsResponse.data['hydra:member'].forEach((color) => {
+        mappedColors[color['@id']] = color;
+    });
+
+    const products = productsResponse.data['hydra:member'];
+
+    const completeItems = this.cart.items.map((cartItem) => (
+        {
+            product: products.find((product) => product['@id'] === cartItem.product),
+            color: cartItem.color ? mappedColors[cartItem.color] : null,
+            quantity: cartItem.quantity,
+        }
+    ));
+
+    this.completeCart = {
+        items: completeItems,
+    };
+}
